digraph hierarchy {

	nodesep=1.0 // increases the separation between nodes

	node [color=Red]
	edge [color=Blue, style=dashed] //setup options

    // concert clients
    bach [color=blue, shape=ellipse, label="linux.ros.turtlebot\n[bach/race]"]
    chopin [color=blue, shape=ellipse, label="linux.ros.turtlebot\n[chopin/race]"]
    donizetti [color=blue, shape=ellipse, label="linux.ros.turtlebot\n[chopin/race]"]
    announcer [color=blue, shape=ellipse, label="linux.ros.pc\nrace_announcer"]
 
    // topics
    race_start [color=red, shape=box, label="race_start\n[std_msgs/Empty]"]
    bach_race_finished [color=red, shape=box, label="bach/race_finished\n[std_msgs/Empty]"]
    chopin_race_finished [color=red, shape=box, label="chopin/race_finished\n[std_msgs/Empty]"]
    donizetti_race_finished [color=red, shape=box, label="donizetti/race_finished\n[std_msgs/Empty]"]
    bach_race_winner [color=red, shape=box, label="bach/race_winner\n[std_msgs/Empty]"]
    chopin_race_winner [color=red, shape=box, label="chopin/race_winner\n[std_msgs/Empty]"]
    donizetti_race_winner [color=red, shape=box, label="donizetti/race_winner\n[std_msgs/Empty]"]
    
    // links
	{rank = same; bach chopin donizetti }
	//{rank = same; clear_cmd_list set_cmd_list recognized_cmd}
	announcer->{ race_start }
	race_start->{ bach }
    race_start->{ chopin }
    race_start->{ donizetti }
    bach->{ bach_race_finished }
    chopin->{ chopin_race_finished }
    donizetti->{ donizetti_race_finished }
    bach_race_finished->{ announcer }
    chopin_race_finished->{ announcer }
    donizetti_race_finished->{ announcer }
    bach_race_winner->{ bach }
    chopin_race_winner->{ chopin }
    donizetti_race_winner->{ donizetti }
    announcer->{ bach_race_winner }
    announcer->{ chopin_race_winner }
    announcer->{ donizetti_race_winner }
}
